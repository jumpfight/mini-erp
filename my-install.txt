1. Setup Backend Go
mini-erp/
├── backend/
│   ├── main.go
│   ├── routes/
│   │   └── user.go
│   └── models/
│       └── user.go

Modul dan Dependensi
go mod init mini-erp
go get github.com/gorilla/mux
go get github.com/rs/cors

go run main.go <> CTRL + C


2. Setup Frontend ReactJS
frontend/
├── src/
│   ├── App.jsx
│   └── components/UserList.jsx

npm create vite@latest frontend --template react
cd frontend
npm install
npm run dev <> CTRL + C

3. Setup docker

    - backend
    FROM golang:1.21-alpine

    # Buat folder kerja
    WORKDIR /app

    # Copy file project ke container
    COPY . .

    # Download dependensi
    RUN go mod download

    # Build binary
    RUN go build -o main .

    # Jalankan binary
    CMD ["./main"]

    # Port backend (ubah sesuai yg kamu pakai di main.go)
    EXPOSE 8080

    - frontend
    # Tahap 1: Build React App
    FROM node:18-alpine AS builder

    WORKDIR /app
    COPY . .

    RUN npm install
    RUN npm run build

    # Tahap 2: Serve pakai nginx
    FROM nginx:alpine

    # Copy hasil build React ke nginx
    COPY --from=builder /app/dist /usr/share/nginx/html

    # Copy config nginx opsional
    COPY nginx.conf /etc/nginx/conf.d/default.conf

    EXPOSE 80


jalankan dockter desktop 
docker-compose down ->remove
docker-compose up --build ->install

-> Hapus image sebelumnya dan rebuild total
docker-compose down --volumes --remove-orphans
docker-compose build --no-cache
docker-compose up

-> Restart Docker & DNS flush
# Di Windows:
net stop com.docker.service
net start com.docker.service
# Di Linux/macOS:
sudo systemctl restart docker
# Flush DNS:
ipconfig /flushdns    # Windows
sudo systemd-resolve --flush-caches  # Linux (systemd)


volumes:
      - ./backend:/app -> setiap perubahan di lokal terlihat di docker
command: ["air"] -> gunakan air untuk hot reload go apps
RUN -> go install github.com/air-verse/air -> install air